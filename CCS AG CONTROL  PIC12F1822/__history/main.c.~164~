#include <main.h>
BYTE state; // I2C vars
BYTE incoming; // I2C vars
BYTE w=0; 
BYTE buffer[ 0x0F] ; // Address and Array of Bytes
int16 tmr1var=0;

float y=4;

//————————————————————————————————————————————————————————————
#INT_SSP 
void ssp_interupt () 
   { 
   BYTE incoming, state; 
   state = i2c_isr_state(); 
   
   if(state < 80) //Master is sending data 
      {   
      incoming = i2c_read();   
      if(state == 0){ //direccion de dispositivo 0x22
         buffer[0x00] = incoming;
         
         }
      if(state == 1){ 
         buffer[0x01] = incoming;
         w=incoming;
         
         }
      if(state == 2){ 
         buffer[0x00] = incoming;
         
         }
      if(state == 3) {
         buffer[0x00] = incoming;
        
         }
      } 

   if(state == 0x80) //Master is requesting data 
      {   
      i2c_write(w);    
      } 
   } 
//------------------------------------------------------------
#int_TIMER1
void  TIMER1_isr(void)//Función de interrupción por desbordamiento TMR1  
   {
   output_low(LED2);
   output_low(ucpin7);
//!   disable_interrupts(INT_TIMER1);
   set_timer1(0);//carga del TMR1  
   }
//------------------------------------------------------------
#byte IOCAF = getenv("SFR:IOCAF") 
#INT_RA 
void int_ioc() 
   {  
//!   enable_interrupts(INT_TIMER1);
   bit_clear(IOCAF,5); //1 For RA1      
   if(input(PIN_A5)==0)
         {    
         output_high(LED2);
         output_high(ucpin7);         
         set_timer1(tmr1var);//carga del TMR1             
         }   
   }

//------------------------------------------------------------
void main()
   {
   port_A_pullups(0x20);
   buffer[0x00]=0x04;
//!   setup_wdt(WDT_8S);      //~8,1 s reset
   output_high(ucpin7);
   output_high(LED2);
   delay_ms(DELAY3);
   output_low(LED2);
   delay_ms(DELAY3);
   output_high(LED2);
   delay_ms(DELAY3);
   output_low(LED2);
   delay_ms(DELAY3);
   setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //65,5 ms overflow   
   
   enable_interrupts(INT_TIMER1);
   
   setup_adc_ports(NO_ANALOGS); 
   enable_interrupts(INT_RA5_H2L);
//!   enable_interrupts(INT_SSP);
   
   y=4;
   tmr1var=65536-(1000*y);
   
   while(1)
         {
         delay_ms(100);
//!         y=((8.3*w)/100);
         
         }

   }
